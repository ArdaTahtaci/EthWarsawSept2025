import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export declare class RequestorService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * GetNetworks - Fetches Networks created by the Requestor.
     * @returns any List of Networks created by the Requestor.
     * @throws ApiError
     */
    getNetworks(): CancelablePromise<Array<{
        id: string;
        ip: string;
        mask: string;
        gateway: string;
    }>>;
    /**
     * CreateNetwork - Creates a new Network.
     * @param requestBody
     * @returns any Network information.
     * @throws ApiError
     */
    createNetwork(requestBody: {
        ip: string;
        mask?: string;
        gateway?: string;
    }): CancelablePromise<{
        id: string;
        ip: string;
        mask: string;
        gateway: string;
    }>;
    /**
     * GetNetwork - Fetches a Network created by the Requestor.
     * @param networkId
     * @returns any Network information.
     * @throws ApiError
     */
    getNetwork(networkId: string): CancelablePromise<{
        id: string;
        ip: string;
        mask: string;
        gateway: string;
    }>;
    /**
     * RemoveNetwork - Removes a Network created by the Requestor.
     * @param networkId
     * @returns any Network removed.
     * @throws ApiError
     */
    removeNetwork(networkId: string): CancelablePromise<any>;
    /**
     * GetAddresses - Fetches Requestor's IP addresses in a Network.
     * @param networkId
     * @returns any List of Requestor's Addresses in a Virtual Private Network.
     * @throws ApiError
     */
    getAddresses(networkId: string): CancelablePromise<Array<{
        ip: string;
    }>>;
    /**
     * AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param networkId
     * @param requestBody
     * @returns any Address assigned.
     * @throws ApiError
     */
    addAddress(networkId: string, requestBody: {
        ip: string;
    }): CancelablePromise<any>;
    /**
     * GetNodes - Fetches Nodes added to a Network.
     * @param networkId
     * @returns any List of nodes in a Virtual Private Network.
     * @throws ApiError
     */
    getNodes(networkId: string): CancelablePromise<Array<{
        id: string;
        ip: string;
    }>>;
    /**
     * AddNode - Advertises and adds a new Node to a Network.
     * @param networkId
     * @param requestBody
     * @returns any Node added.
     * @throws ApiError
     */
    addNode(networkId: string, requestBody: {
        id: string;
        ip: string;
    }): CancelablePromise<any>;
    /**
     * RemoveNode - Advertises and removes a Node from a Network.
     * @param networkId
     * @param nodeId
     * @returns any Node removed.
     * @throws ApiError
     */
    removeNode(networkId: string, nodeId: string): CancelablePromise<any>;
    /**
     * GetConnections - Fetches Requestor's TCP connections in a Network.
     * @param networkId
     * @returns any List of established connections within a Virtual Private Network.
     * @throws ApiError
     */
    getConnections(networkId: string): CancelablePromise<Array<{
        readonly protocol: number;
        readonly localIp: string;
        readonly localPort: number;
        readonly remoteIp: string;
        readonly remotePort: number;
    }>>;
}
