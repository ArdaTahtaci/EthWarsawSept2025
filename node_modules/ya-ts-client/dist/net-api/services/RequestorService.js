"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorService = void 0;
class RequestorService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * GetNetworks - Fetches Networks created by the Requestor.
     * @returns any List of Networks created by the Requestor.
     * @throws ApiError
     */
    getNetworks() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/net',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
            },
        });
    }
    /**
     * CreateNetwork - Creates a new Network.
     * @param requestBody
     * @returns any Network information.
     * @throws ApiError
     */
    createNetwork(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/net',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
            },
        });
    }
    /**
     * GetNetwork - Fetches a Network created by the Requestor.
     * @param networkId
     * @returns any Network information.
     * @throws ApiError
     */
    getNetwork(networkId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/net/{networkId}',
            path: {
                'networkId': networkId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * RemoveNetwork - Removes a Network created by the Requestor.
     * @param networkId
     * @returns any Network removed.
     * @throws ApiError
     */
    removeNetwork(networkId) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/net/{networkId}',
            path: {
                'networkId': networkId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * GetAddresses - Fetches Requestor's IP addresses in a Network.
     * @param networkId
     * @returns any List of Requestor's Addresses in a Virtual Private Network.
     * @throws ApiError
     */
    getAddresses(networkId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/net/{networkId}/addresses',
            path: {
                'networkId': networkId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * AddAddress - Assigns a new IP address to the Requestor in a Network.
     * @param networkId
     * @param requestBody
     * @returns any Address assigned.
     * @throws ApiError
     */
    addAddress(networkId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/net/{networkId}/addresses',
            path: {
                'networkId': networkId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                409: `(409) Conflict.`,
            },
        });
    }
    /**
     * GetNodes - Fetches Nodes added to a Network.
     * @param networkId
     * @returns any List of nodes in a Virtual Private Network.
     * @throws ApiError
     */
    getNodes(networkId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/net/{networkId}/nodes',
            path: {
                'networkId': networkId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * AddNode - Advertises and adds a new Node to a Network.
     * @param networkId
     * @param requestBody
     * @returns any Node added.
     * @throws ApiError
     */
    addNode(networkId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/net/{networkId}/nodes',
            path: {
                'networkId': networkId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                409: `(409) Conflict.`,
            },
        });
    }
    /**
     * RemoveNode - Advertises and removes a Node from a Network.
     * @param networkId
     * @param nodeId
     * @returns any Node removed.
     * @throws ApiError
     */
    removeNode(networkId, nodeId) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/net/{networkId}/nodes/{nodeId}',
            path: {
                'networkId': networkId,
                'nodeId': nodeId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * GetConnections - Fetches Requestor's TCP connections in a Network.
     * @param networkId
     * @returns any List of established connections within a Virtual Private Network.
     * @throws ApiError
     */
    getConnections(networkId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/net/{networkId}/tcp',
            path: {
                'networkId': networkId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
}
exports.RequestorService = RequestorService;
