"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderService = void 0;
class ProviderService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returns agreement_id corresponding to the activity
     * 'This call shall return id of the agreement that lead to the creation of this activity'
     *
     * @param activityId
     * @returns string Agreement.
     * @throws ApiError
     */
    getActivityAgreement(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/agreement',
            path: {
                'activityId': activityId,
            },
            errors: {
                400: `(400) Bad request`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Fetch Requestor command events.
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    collectActivityEvents(appSessionId, afterTimestamp, timeout = 5, maxEvents = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/events',
            query: {
                'appSessionId': appSessionId,
                'afterTimestamp': afterTimestamp,
                'timeout': timeout,
                'maxEvents': maxEvents,
            },
            errors: {
                403: `(403) Forbidden.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get state of specified Activity.
     * @param activityId
     * @returns any Success
     * @throws ApiError
     */
    getActivityState(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/state',
            path: {
                'activityId': activityId,
            },
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Set state of specified Activity.
     * @param activityId
     * @param requestBody
     * @returns any Success
     * @throws ApiError
     */
    setActivityState(activityId, requestBody) {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/activity/{activityId}/state',
            path: {
                'activityId': activityId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get usage of specified Activity.
     * @param activityId
     * @returns any Success
     * @throws ApiError
     */
    getActivityUsage(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/usage',
            path: {
                'activityId': activityId,
            },
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
}
exports.ProviderService = ProviderService;
