"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorControlService = void 0;
class RequestorControlService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Creates new Activity based on given Agreement.
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @param requestBody
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any Success
     * @throws ApiError
     */
    createActivity(requestBody, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/activity',
            query: {
                'timeout': timeout,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Executes an ExeScript batch within a given Activity.
     * **Note:** This call shall get routed directly to ExeUnit.
     * @param activityId
     * @param requestBody
     * @returns string Success
     * @throws ApiError
     */
    exec(activityId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/activity/{activityId}/exec',
            path: {
                'activityId': activityId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Sends encrypted command to secure exe-unit.
     * @param activityId
     * @param requestBody
     * @returns binary Success
     * @throws ApiError
     */
    callEncrypted(activityId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/activity/{activityId}/encrypted',
            path: {
                'activityId': activityId,
            },
            body: requestBody,
            mediaType: 'application/octet-stream',
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Queries for ExeScript batch results.
     * 'This call shall collect ExeScriptCommand result objects received directly from ExeUnit (via the long polling pattern). **Note:** two formats of response are specified (as indicated by the Accept header):
     * - application/json - standard JSON response, specified below, as code generators handle it properly.
     * - text/event-stream - an EventSource implementation (as per https://www.w3.org/TR/eventsource/).
     * This isn't explicitly specified as code generators generally are unable to handle this.
     * The streaming events adhere to following format:
     *
     * event: runtime
     * data: <RuntimeEvent structure>
     *
     * This streaming endpoint requires dedicated implementation. '
     *
     * @param activityId
     * @param batchId
     * @param commandIndex Wait until command with the specified index finishes. Must be accompanied by a valid "pollTimeout" query parameter.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @returns any Success
     * @throws ApiError
     */
    getExecBatchResults(activityId, batchId, commandIndex, timeout = 5) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/exec/{batchId}',
            path: {
                'activityId': activityId,
                'batchId': batchId,
            },
            query: {
                'commandIndex': commandIndex,
                'timeout': timeout,
            },
            errors: {
                400: `(400) Bad request`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Destroys given Activity.
     * **Note:** This call shall get routed as a provider event (see ProviderEvent structure).
     * @param activityId
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any Success
     * @throws ApiError
     */
    destroyActivity(activityId, timeout = 5) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/activity/{activityId}',
            path: {
                'activityId': activityId,
            },
            query: {
                'timeout': timeout,
            },
            errors: {
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
}
exports.RequestorControlService = RequestorControlService;
