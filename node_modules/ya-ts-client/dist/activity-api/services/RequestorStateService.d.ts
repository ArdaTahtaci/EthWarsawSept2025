import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export declare class RequestorStateService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Returns agreement_id corresponding to the activity
     * 'This call shall return id of the agreement that lead to the creation of this activity'
     *
     * @param activityId
     * @returns string Agreement.
     * @throws ApiError
     */
    getActivityAgreement(activityId: string): CancelablePromise<string>;
    /**
     * Get state of specified Activity.
     * @param activityId
     * @returns any Success
     * @throws ApiError
     */
    getActivityState(activityId: string): CancelablePromise<{
        /**
         * State pair tuple (CurrentState, NextState). NextState is equal to null if there is no pending transition between states.
         */
        state: Array<'New' | 'Initialized' | 'Deployed' | 'Ready' | 'Unresponsive' | 'Terminated' | null>;
        /**
         * Reason for Activity termination (specified when Activity in Terminated state).
         */
        reason?: string;
        /**
         * If error caused state change - error message shall be provided.
         */
        errorMessage?: string;
    }>;
    /**
     * Get usage of specified Activity.
     * @param activityId
     * @returns any Success
     * @throws ApiError
     */
    getActivityUsage(activityId: string): CancelablePromise<{
        /**
         * Current vector of usage counters consumed by the Activity. The sequence of values corresponds to Usage Vector property (golem.usage.vector) as indicated in the Agreement (Offer part).
         */
        currentUsage?: Array<number>;
        /**
         * Usage update timestamp (UTC)
         */
        timestamp: number;
    }>;
    /**
     * Get running commands for a specified Activity.
     * **Note:** This call shall get routed directly to ExeUnit.
     * @param activityId
     * @returns any OK
     * @throws ApiError
     */
    getRunningCommand(activityId: string): CancelablePromise<Array<{
        batchId: string;
        command: string;
        progress?: string;
        params?: Array<string>;
    }>>;
}
