"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorStateService = void 0;
class RequestorStateService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Returns agreement_id corresponding to the activity
     * 'This call shall return id of the agreement that lead to the creation of this activity'
     *
     * @param activityId
     * @returns string Agreement.
     * @throws ApiError
     */
    getActivityAgreement(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/agreement',
            path: {
                'activityId': activityId,
            },
            errors: {
                400: `(400) Bad request`,
                403: `(403) Forbidden.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get state of specified Activity.
     * @param activityId
     * @returns any Success
     * @throws ApiError
     */
    getActivityState(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/state',
            path: {
                'activityId': activityId,
            },
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get usage of specified Activity.
     * @param activityId
     * @returns any Success
     * @throws ApiError
     */
    getActivityUsage(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/usage',
            path: {
                'activityId': activityId,
            },
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get running commands for a specified Activity.
     * **Note:** This call shall get routed directly to ExeUnit.
     * @param activityId
     * @returns any OK
     * @throws ApiError
     */
    getRunningCommand(activityId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/activity/{activityId}/command',
            path: {
                'activityId': activityId,
            },
            errors: {
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
}
exports.RequestorStateService = RequestorStateService;
