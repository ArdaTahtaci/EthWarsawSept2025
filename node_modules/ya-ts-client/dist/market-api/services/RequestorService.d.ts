import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export declare class RequestorService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Creates new offer/demand Iterator.
     *
     * @param requestBody
     * @returns any Unexpected error.
     * @returns string Market scan start.
     * @throws ApiError
     */
    beginScan(requestBody: {
        /**
         * specifies how long an unused iterator will live in the server's memory. The value may be unspecified, defaulting to 30 seconds. This is intended to protect the server from memory leaks in applications that do not clean up their resources.
         *
         */
        timeout?: number;
        /**
         * scan type. offer for offers. demand for demands.
         *
         */
        type: 'offer' | 'demand';
        /**
         * optional filter.
         *
         */
        constraints?: string;
    }): CancelablePromise<{
        message?: string;
    } | string>;
    /**
     * @param subscriptionId
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param peerId allows to query offers from specified node.
     *
     * @returns any Scan Events
     * @throws ApiError
     */
    collectScanResults(subscriptionId: string, timeout?: number, maxEvents?: number, peerId?: string): CancelablePromise<Array<({
        /**
         * The object which includes all the Demand/Offer/Proposal properties.
         * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
         *
         * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
         * ### Example property object:
         * ```
         * {
             * "golem.com.pricing.model":"linear",
             * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
             * "golem.com.scheme":"payu",
             * "golem.com.scheme.payu.interval_sec":6.0,
             * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
             * "golem.inf.cpu.architecture":"x86_64",
             * "golem.inf.cpu.cores":4,
             * "golem.inf.cpu.threads":7,
             * "golem.inf.mem.gib":10.612468048930168,
             * "golem.inf.storage.gib":81.7227783203125,
             * "golem.node.debug.subnet":"market-devnet",
             * "golem.node.id.name":"tworec@mf-market-devnet",
             * "golem.runtime.name":"vm",
             * "golem.runtime.version@v":"0.1.0"
             * }
             * ```
             *
             */
        properties: Record<string, any>;
        constraints: string;
    } & {
        readonly offerId: string;
        readonly providerId: string;
        timestamp: string;
    })>>;
    /**
     * @param subscriptionId
     * @returns any Unexpected error.
     * @throws ApiError
     */
    endScan(subscriptionId: string): CancelablePromise<{
        message?: string;
    }>;
    /**
     * GetDemands - Fetches all active Demands which have been published by the Requestor.
     * @returns any Demand list.
     * @throws ApiError
     */
    getDemands(): CancelablePromise<Array<({
        /**
         * The object which includes all the Demand/Offer/Proposal properties.
         * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
         *
         * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
         * ### Example property object:
         * ```
         * {
             * "golem.com.pricing.model":"linear",
             * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
             * "golem.com.scheme":"payu",
             * "golem.com.scheme.payu.interval_sec":6.0,
             * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
             * "golem.inf.cpu.architecture":"x86_64",
             * "golem.inf.cpu.cores":4,
             * "golem.inf.cpu.threads":7,
             * "golem.inf.mem.gib":10.612468048930168,
             * "golem.inf.storage.gib":81.7227783203125,
             * "golem.node.debug.subnet":"market-devnet",
             * "golem.node.id.name":"tworec@mf-market-devnet",
             * "golem.runtime.name":"vm",
             * "golem.runtime.version@v":"0.1.0"
             * }
             * ```
             *
             */
        properties: Record<string, any>;
        constraints: string;
    } & {
        readonly demandId: string;
        readonly requestorId: string;
        timestamp: string;
    })>>;
    /**
     * SubscribeDemand - Publishes Requestor capabilities via Demand.
     * Demand object can be considered an "open" or public Demand, as it is not directed at a specific Provider, but rather is sent to the market so that the matching mechanism implementation can associate relevant Offers.
     *
     * **Note**: it is an "atomic" operation, ie. as soon as Subscription is placed, the Demand is published on the market.
     *
     * @param requestBody
     * @returns any Unexpected error.
     * @returns string Subscribed.
     * @throws ApiError
     */
    subscribeDemand(requestBody: {
        /**
         * The object which includes all the Demand/Offer/Proposal properties.
         * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
         *
         * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
         * ### Example property object:
         * ```
         * {
             * "golem.com.pricing.model":"linear",
             * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
             * "golem.com.scheme":"payu",
             * "golem.com.scheme.payu.interval_sec":6.0,
             * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
             * "golem.inf.cpu.architecture":"x86_64",
             * "golem.inf.cpu.cores":4,
             * "golem.inf.cpu.threads":7,
             * "golem.inf.mem.gib":10.612468048930168,
             * "golem.inf.storage.gib":81.7227783203125,
             * "golem.node.debug.subnet":"market-devnet",
             * "golem.node.id.name":"tworec@mf-market-devnet",
             * "golem.runtime.name":"vm",
             * "golem.runtime.version@v":"0.1.0"
             * }
             * ```
             *
             */
        properties: Record<string, any>;
        constraints: string;
    }): CancelablePromise<{
        message?: string;
    } | string>;
    /**
     * UnsubscribeDemand - Stop subscription for previously published Demand.
     * Stop receiving Proposals.
     *
     * **Note**: this will terminate all pending `collectOffers` calls on this subscription. This implies, that client code should not `unsubscribeDemand` before it has received all expected/useful inputs from `collectOffers`.
     *
     * @param subscriptionId
     * @returns any Unexpected error.
     * @throws ApiError
     */
    unsubscribeDemand(subscriptionId: string): CancelablePromise<{
        message?: string;
    }>;
    /**
     * CollectOffers - Reads Market responses to published Demand.
     * This is a blocking operation. It will not return until there is at least one new event.
     * Returns Proposal related events:
     * * `ProposalEvent` - Indicates that there is new Offer Proposal for this Demand.
     * * `ProposalRejectedEvent` - Indicates that the Provider has rejected
     * our previous Proposal related to this Demand. This effectively ends a
     * Negotiation chain - it explicitly indicates that the sender will not
     * create another counter-Proposal.
     *
     * * `PropertyQueryEvent` - not supported yet.
     *
     * **Note**: When `collectOffers` is waiting, simultaneous call to `unsubscribeDemand` on the same `subscriptionId` should result in "Subscription does not exist" error returned from `collectOffers`.
     *
     * **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet.
     *
     * @param subscriptionId
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @returns any Proposal or Agreement event list.
     * @throws ApiError
     */
    collectOffers(subscriptionId: string, timeout?: number, maxEvents?: number): CancelablePromise<Array<{
        eventType: string;
        eventDate: string;
    }>>;
    /**
     * QueryReplyDemands - Handles dynamic property query.
     * Sends a response to a received property value query.
     *
     * The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.
     *
     * **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.
     *
     * **Note**: This method must be implemented for Market API Capability Level 2.
     *
     * @param subscriptionId
     * @param queryId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    queryReplyDemands(subscriptionId: string, queryId: string, requestBody: Record<string, any>): CancelablePromise<{
        message?: string;
    }>;
    /**
     * GetProposalOffer - Fetches Proposal (Offer) with given id.
     * @param subscriptionId
     * @param proposalId
     * @returns any Proposal.
     * @throws ApiError
     */
    getProposalOffer(subscriptionId: string, proposalId: string): CancelablePromise<({
        /**
         * The object which includes all the Demand/Offer/Proposal properties.
         * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
         *
         * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
         * ### Example property object:
         * ```
         * {
             * "golem.com.pricing.model":"linear",
             * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
             * "golem.com.scheme":"payu",
             * "golem.com.scheme.payu.interval_sec":6.0,
             * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
             * "golem.inf.cpu.architecture":"x86_64",
             * "golem.inf.cpu.cores":4,
             * "golem.inf.cpu.threads":7,
             * "golem.inf.mem.gib":10.612468048930168,
             * "golem.inf.storage.gib":81.7227783203125,
             * "golem.node.debug.subnet":"market-devnet",
             * "golem.node.id.name":"tworec@mf-market-devnet",
             * "golem.runtime.name":"vm",
             * "golem.runtime.version@v":"0.1.0"
             * }
             * ```
             *
             */
        properties: Record<string, any>;
        constraints: string;
    } & {
        readonly proposalId: string;
        readonly issuerId: string;
        /**
         * * `Initial` - proposal arrived from the market as response to subscription
         * * `Draft` - bespoke counter-proposal issued by one party directly to other party (negotiation phase)
         * * `Rejected` by other party
         * * `Accepted` - promoted into the Agreement draft
         * * `Expired` - not accepted nor rejected before validity period
         *
         */
        readonly state: 'Initial' | 'Draft' | 'Rejected' | 'Accepted' | 'Expired';
        timestamp: string;
        /**
         * id of the proposal from other side which this proposal responds to
         *
         */
        prevProposalId?: string;
    })>;
    /**
     * CounterProposalDemand - Responds with a bespoke Demand to received Offer.
     * Creates and sends a modified version of original Demand (a counter-proposal) adjusted to previously received Proposal (ie. Offer). Changes Proposal state to `Draft`. Returns created Proposal id.
     *
     * @param subscriptionId
     * @param proposalId
     * @param requestBody
     * @returns any Unexpected error.
     * @returns string Counter Proposal created.
     * @throws ApiError
     */
    counterProposalDemand(subscriptionId: string, proposalId: string, requestBody: {
        /**
         * The object which includes all the Demand/Offer/Proposal properties.
         * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
         *
         * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
         * ### Example property object:
         * ```
         * {
             * "golem.com.pricing.model":"linear",
             * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
             * "golem.com.scheme":"payu",
             * "golem.com.scheme.payu.interval_sec":6.0,
             * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
             * "golem.inf.cpu.architecture":"x86_64",
             * "golem.inf.cpu.cores":4,
             * "golem.inf.cpu.threads":7,
             * "golem.inf.mem.gib":10.612468048930168,
             * "golem.inf.storage.gib":81.7227783203125,
             * "golem.node.debug.subnet":"market-devnet",
             * "golem.node.id.name":"tworec@mf-market-devnet",
             * "golem.runtime.name":"vm",
             * "golem.runtime.version@v":"0.1.0"
             * }
             * ```
             *
             */
        properties: Record<string, any>;
        constraints: string;
    }): CancelablePromise<{
        message?: string;
    } | string>;
    /**
     * RejectProposalOffer - Rejects Proposal (Offer).
     * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.
     *
     * @param subscriptionId
     * @param proposalId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    rejectProposalOffer(subscriptionId: string, proposalId: string, requestBody?: Record<string, any>): CancelablePromise<{
        message?: string;
    }>;
    /**
     * ListAgreements - Lists agreements with optional filters
     * List agreements.
     * Supported filters: * state * creation datetime * app session id
     * A well-formed call will result in a collection of objects with the following fields: * id * creationTs * approveTs * role
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param state State of an agreement
     * @param afterDate Apply only to records created later than the specified timestamp
     * @param beforeDate Apply only to records created before the specified timestamp
     * @returns any Result of listing agreements.
     * @throws ApiError
     */
    listAgreements(appSessionId?: string, state?: 'Proposal' | 'Pending' | 'Cancelled' | 'Rejected' | 'Approved' | 'Expired' | 'Terminated', afterDate?: string, beforeDate?: string): CancelablePromise<Array<{
        id: string;
        timestamp?: string;
        approvedDate?: string;
        role: string;
    }>>;
    /**
     * CreateAgreement - Creates Agreement from selected Proposal.
     * Initiates the Agreement handshake phase.
     *
     * Formulates an Agreement artifact from the Proposal indicated by the received Proposal Id. Created Agreement is in `Proposal` state.
     *
     * The Approval Expiry Date is added to Agreement artifact and implies the effective timeout on the whole Agreement Confirmation sequence.
     *
     * A successful call to `createAgreement` shall immediately be followed by a `confirmAgreement` and `waitForApproval` call in order to listen for responses from the Provider.
     *
     * **Note**: Moves given Proposal to `Approved` state.
     *
     * @param requestBody
     * @returns any Unexpected error.
     * @returns string Agreement created.
     * @throws ApiError
     */
    createAgreement(requestBody: {
        /**
         * id of the proposal to be promoted to the Agreement
         */
        proposalId: string;
        /**
         * End of validity period.
         *
         * Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire.
         *
         */
        validTo: string;
    }): CancelablePromise<{
        message?: string;
    } | string>;
    /**
     * GetAgreement - Fetches agreement with given agreement id.
     * @param agreementId
     * @returns any Agreement.
     * @throws ApiError
     */
    getAgreement(agreementId: string): CancelablePromise<{
        agreementId: string;
        demand: ({
            /**
             * The object which includes all the Demand/Offer/Proposal properties.
             * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
             *
             * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
             * ### Example property object:
             * ```
             * {
                 * "golem.com.pricing.model":"linear",
                 * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
                 * "golem.com.scheme":"payu",
                 * "golem.com.scheme.payu.interval_sec":6.0,
                 * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
                 * "golem.inf.cpu.architecture":"x86_64",
                 * "golem.inf.cpu.cores":4,
                 * "golem.inf.cpu.threads":7,
                 * "golem.inf.mem.gib":10.612468048930168,
                 * "golem.inf.storage.gib":81.7227783203125,
                 * "golem.node.debug.subnet":"market-devnet",
                 * "golem.node.id.name":"tworec@mf-market-devnet",
                 * "golem.runtime.name":"vm",
                 * "golem.runtime.version@v":"0.1.0"
                 * }
                 * ```
                 *
                 */
            properties: Record<string, any>;
            constraints: string;
        } & {
            readonly demandId: string;
            readonly requestorId: string;
            timestamp: string;
        });
        offer: ({
            /**
             * The object which includes all the Demand/Offer/Proposal properties.
             * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
             *
             * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
             * ### Example property object:
             * ```
             * {
                 * "golem.com.pricing.model":"linear",
                 * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
                 * "golem.com.scheme":"payu",
                 * "golem.com.scheme.payu.interval_sec":6.0,
                 * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
                 * "golem.inf.cpu.architecture":"x86_64",
                 * "golem.inf.cpu.cores":4,
                 * "golem.inf.cpu.threads":7,
                 * "golem.inf.mem.gib":10.612468048930168,
                 * "golem.inf.storage.gib":81.7227783203125,
                 * "golem.node.debug.subnet":"market-devnet",
                 * "golem.node.id.name":"tworec@mf-market-devnet",
                 * "golem.runtime.name":"vm",
                 * "golem.runtime.version@v":"0.1.0"
                 * }
                 * ```
                 *
                 */
            properties: Record<string, any>;
            constraints: string;
        } & {
            readonly offerId: string;
            readonly providerId: string;
            timestamp: string;
        });
        /**
         * End of validity period.
         *
         * Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire.
         *
         */
        validTo: string;
        /**
         * Agreement approval timestamp
         */
        approvedDate?: string;
        /**
         * * `Proposal` - newly created by a Requestor (draft based on Proposal)
         * * `Pending` - confirmed by a Requestor and send to Provider for approval
         * * `Cancelled` by a Requestor
         * * `Rejected` by a Provider
         * * `Approved` by both sides
         * * `Expired` - not approved, rejected nor cancelled within validity period
         * * `Terminated` - finished after approval.
         *
         */
        state: 'Proposal' | 'Pending' | 'Cancelled' | 'Rejected' | 'Approved' | 'Expired' | 'Terminated';
        timestamp: string;
        /**
         * A correlation/session identifier used for querying events related to an action where this appSessionId has been specified.
         *
         */
        appSessionId?: string;
        proposedSignature?: string;
        approvedSignature?: string;
        committedSignature?: string;
    }>;
    /**
     * CancelAgreement - Cancels Agreement.
     * It is only possible before Provider approved or rejected the Agreement, and before its Expiration.
     *
     * Causes:
     * - the awaiting `approveAgreement` on Provider side to return with `Cancelled` response.
     * - the awaiting `waitForApproval` local call to return with `Cancelled` response.
     *
     * @param agreementId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    cancelAgreement(agreementId: string, requestBody?: Record<string, any>): CancelablePromise<{
        message?: string;
    }>;
    /**
     * ConfirmAgreement - Sends Agreement proposal to the Provider.
     * Signs self-created Agreement and sends it to the Provider.
     *
     * This call should immediately follow `createAgreement`.
     *
     * @param agreementId
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any Unexpected error.
     * @throws ApiError
     */
    confirmAgreement(agreementId: string, appSessionId?: string): CancelablePromise<{
        message?: string;
    }>;
    /**
     * WaitForApproval - Waits for Agreement approval by the Provider.
     * This is a blocking operation. The call may be aborted by Requestor caller code. After the call is aborted or timed out, another `waitForApproval` call can be raised on the same Agreement Id.
     *
     * @param agreementId
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any Unexpected error.
     * @throws ApiError
     */
    waitForApproval(agreementId: string, timeout?: number): CancelablePromise<{
        message?: string;
    }>;
    /**
     * CollectAgreementEvents - Collects events related to an Agreement.
     * This is a blocking operation. It will not return until there is at least one new event. All events are appearing on both sides equally.
     *
     * Returns Agreement related events:
     * * `AgreementApprovedEvent` - Indicates that the Agreement has been approved
     * by the Provider.
     * - The Provider is now ready to accept a request to start an Activity
     * as described in the negotiated agreement.
     * - The Providers’s corresponding `approveAgreement` call returns `Approved`
     * after this event is emitted.
     *
     * * `AgreementRejectedEvent` - Indicates that the Provider has called
     * `rejectAgreement`, which effectively stops the Agreement handshake.
     * The Requestor may attempt to return to the Negotiation phase by sending
     * a new Proposal.
     *
     * * `AgreementCancelledEvent` - Indicates that the Requestor has called
     * `cancelAgreement`, which effectively stops the Agreement handshake.
     *
     * * `AgreementTerminatedEvent` - Indicates that the Agreement has been
     * terminated by specified party (contains signature).
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any Agreement-related event list.
     * @throws ApiError
     */
    collectAgreementEvents(timeout?: number, afterTimestamp?: string, maxEvents?: number, appSessionId?: string): CancelablePromise<Array<({
        eventType: string;
        eventDate: string;
    } & {
        agreementId: string;
    })>>;
    /**
     * TerminateAgreement - Terminates approved Agreement.
     * Method to finish/close the Agreement while in `Approved` state.
     *
     * The other party gets notified about calling party decision to terminate a "running" agreement.
     *
     * **Note**: Can be invoked at any time after Agreement was approved by both sides.
     *
     * **Note**: Financial and reputational consequences are not defined by this specification.
     *
     * @param agreementId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    terminateAgreement(agreementId: string, requestBody?: Record<string, any>): CancelablePromise<{
        message?: string;
    }>;
    /**
     * Gets termination reason reported when terminateAgreement operation was called.
     * Method to get the reason for terminating the Agreement.
     *
     * @param agreementId
     * @returns any Agreement termination reason.
     * @throws ApiError
     */
    getTerminateAgreementReason(agreementId: string): CancelablePromise<(({
        eventType: string;
        eventDate: string;
    } & {
        agreementId: string;
    }) & {
        terminator: 'Requestor' | 'Provider';
        signature: string;
        /**
         * Generic Event reason information structure.
         *
         */
        reason?: Record<string, any>;
    })>;
}
