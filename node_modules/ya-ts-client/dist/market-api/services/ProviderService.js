"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderService = void 0;
class ProviderService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * GetOffers - Fetches all active Offers which have been published by the Provider.
     * @returns any Offer list.
     * @throws ApiError
     */
    getOffers() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/offers',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
            },
        });
    }
    /**
     * SubscribeOffer - Publishes Provider capabilities via Offer.
     * Offer object can be considered an "open" or public Offer, as it is not directed at a specific Requestor, but rather is sent to the market so that the matching mechanism implementation can associate relevant Demands.
     *
     * **Note**: it is an "atomic" operation, ie. as soon as Subscription is placed, the Offer is published on the market.
     *
     * @param requestBody
     * @returns any Unexpected error.
     * @returns string Subscribed.
     * @throws ApiError
     */
    subscribeOffer(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/offers',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
            },
        });
    }
    /**
     * UnsubscribeOffer - Stop subscription for previously published Offer.
     * Stop receiving Proposals.
     *
     * **Note**: this will terminate all pending `collectDemands` calls on this subscription. This implies, that client code should not `unsubscribeOffer` before it has received all expected/useful inputs from `collectDemands`.
     *
     * @param subscriptionId
     * @returns any Unexpected error.
     * @throws ApiError
     */
    unsubscribeOffer(subscriptionId) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/offers/{subscriptionId}',
            path: {
                'subscriptionId': subscriptionId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                410: `Already unsubscribed.`,
            },
        });
    }
    /**
     * CollectDemands - Reads Market responses to published Offer.
     * This is a blocking operation. It will not return until there is at least one new event.
     * Returns Proposal related events:
     * * `ProposalEvent` - Indicates that there is new Demand Proposal for this Offer.
     * * `ProposalRejectedEvent` - Indicates that the Requestor has rejected
     * our previous Proposal related to this Offer. This effectively ends a
     * Negotiation chain - it explicitly indicates that the sender will not
     * create another counter-Proposal.
     *
     * * `AgreementEvent` - Indicates that the Requestor is accepting our
     * previous Proposal and ask for our approval of the Agreement.
     *
     * * `PropertyQueryEvent` - not supported yet.
     *
     * **Note**: When `collectDemands` is waiting, simultaneous call to `unsubscribeOffer` on the same `subscriptionId` should result in "Subscription does not exist" error returned from `collectDemands`.
     *
     * **Note**: Specification requires this endpoint to support list of specific Proposal Ids to listen for messages related only to specific Proposals. This is not covered yet.
     *
     * @param subscriptionId
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @returns any Proposal or Agreement event list.
     * @throws ApiError
     */
    collectDemands(subscriptionId, timeout = 5, maxEvents = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/offers/{subscriptionId}/events',
            path: {
                'subscriptionId': subscriptionId,
            },
            query: {
                'timeout': timeout,
                'maxEvents': maxEvents,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * QueryReplyOffers - Handles dynamic property query.
     * Sends a response to a received property value query.
     *
     * The Market Matching Mechanism, when resolving the match relation for the specific Demand-Offer pair, is to detect the “dynamic” properties required (via constraints) by the other side. At this point, it is able to query the issuing node for those properties and submit the other side’s requested properties as the context of the query.
     *
     * **Note**: The property query responses may be submitted in “chunks”, ie. the responder may choose to resolve ‘quick’/lightweight’ properties faster and provide response sooner, while still working on more time-consuming properties in the background. Therefore the response contains both the resolved properties, as well as list of properties which responder knows still require resolution.
     *
     * **Note**: This method must be implemented for Market API Capability Level 2.
     *
     * @param subscriptionId
     * @param queryId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    queryReplyOffers(subscriptionId, queryId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/offers/{subscriptionId}/propertyQuery/{queryId}',
            path: {
                'subscriptionId': subscriptionId,
                'queryId': queryId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * GetProposalDemand - Fetches Proposal (Demand) with given id.
     * @param subscriptionId
     * @param proposalId
     * @returns any Proposal.
     * @throws ApiError
     */
    getProposalDemand(subscriptionId, proposalId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/offers/{subscriptionId}/proposals/{proposalId}',
            path: {
                'subscriptionId': subscriptionId,
                'proposalId': proposalId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                410: `Proposal rejected.`,
            },
        });
    }
    /**
     * CounterProposalOffer - Responds with a bespoke Offer to received Demand.
     * Creates and sends a modified version of original Offer (a counter-proposal) adjusted to previously received Proposal (ie. Demand). Changes Proposal state to `Draft`. Returns created Proposal id.
     *
     * @param subscriptionId
     * @param proposalId
     * @param requestBody
     * @returns any Unexpected error.
     * @returns string Counter Proposal created.
     * @throws ApiError
     */
    counterProposalOffer(subscriptionId, proposalId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/offers/{subscriptionId}/proposals/{proposalId}',
            path: {
                'subscriptionId': subscriptionId,
                'proposalId': proposalId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                410: `Proposal rejected.`,
            },
        });
    }
    /**
     * RejectProposalDemand - Rejects Proposal (Demand).
     * Effectively ends a Negotiation chain - it explicitly indicates that the sender will not create another counter-Proposal.
     *
     * @param subscriptionId
     * @param proposalId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    rejectProposalDemand(subscriptionId, proposalId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/offers/{subscriptionId}/proposals/{proposalId}/reject',
            path: {
                'subscriptionId': subscriptionId,
                'proposalId': proposalId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                410: `Proposal already rejected.`,
            },
        });
    }
    /**
     * ListAgreements - Lists agreements with optional filters
     * List agreements.
     * Supported filters: * state * creation datetime * app session id
     * A well-formed call will result in a collection of objects with the following fields: * id * creationTs * approveTs * role
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param state State of an agreement
     * @param afterDate Apply only to records created later than the specified timestamp
     * @param beforeDate Apply only to records created before the specified timestamp
     * @returns any Result of listing agreements.
     * @throws ApiError
     */
    listAgreements(appSessionId, state, afterDate, beforeDate) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/agreements',
            query: {
                'appSessionId': appSessionId,
                'state': state,
                'afterDate': afterDate,
                'beforeDate': beforeDate,
            },
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
            },
        });
    }
    /**
     * GetAgreement - Fetches agreement with given agreement id.
     * @param agreementId
     * @returns any Agreement.
     * @throws ApiError
     */
    getAgreement(agreementId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/agreements/{agreementId}',
            path: {
                'agreementId': agreementId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * CollectAgreementEvents - Collects events related to an Agreement.
     * This is a blocking operation. It will not return until there is at least one new event. All events are appearing on both sides equally.
     *
     * Returns Agreement related events:
     * * `AgreementApprovedEvent` - Indicates that the Agreement has been approved
     * by the Provider.
     * - The Provider is now ready to accept a request to start an Activity
     * as described in the negotiated agreement.
     * - The Providers’s corresponding `approveAgreement` call returns `Approved`
     * after this event is emitted.
     *
     * * `AgreementRejectedEvent` - Indicates that the Provider has called
     * `rejectAgreement`, which effectively stops the Agreement handshake.
     * The Requestor may attempt to return to the Negotiation phase by sending
     * a new Proposal.
     *
     * * `AgreementCancelledEvent` - Indicates that the Requestor has called
     * `cancelAgreement`, which effectively stops the Agreement handshake.
     *
     * * `AgreementTerminatedEvent` - Indicates that the Agreement has been
     * terminated by specified party (contains signature).
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any Agreement-related event list.
     * @throws ApiError
     */
    collectAgreementEvents(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/agreementEvents',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
    /**
     * ApproveAgreement - Approves Agreement proposed by the Reqestor.
     * This is a blocking operation. The call may be aborted by Provider caller code. After the call is aborted or timed out, another `approveAgreement` call can be raised on the same `agreementId`.
     *
     * **Note**: It is expected from the Provider node implementation to “ring-fence” the resources required to fulfill the Agreement before the ApproveAgreement is sent. However, the resources should not be fully committed until `Approved` response is received from the `approveAgreement` call.
     *
     * **Note**: Mutually exclusive with `rejectAgreement`.
     *
     * @param agreementId
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any Unexpected error.
     * @throws ApiError
     */
    approveAgreement(agreementId, appSessionId, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/agreements/{agreementId}/approve',
            path: {
                'agreementId': agreementId,
            },
            query: {
                'appSessionId': appSessionId,
                'timeout': timeout,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                408: `Agreement not approved within given timeout. Try again.`,
                410: `Agreement approval failed permanently.
                                        Attached \`ErrorMessage\` contains further details:
                                        - \`Rejected\` - Indicates that the Provider himself has already
                                        called \`rejectAgreement\`.
                                        - \`Cancelled\` - Indicates that before Provider approved this Agreement,
                                        the Requestor has called \`cancelAgreement\`, thus invalidating the
                                        Agreement. The Provider may attempt to return to the Negotiation phase
                                        by sending a new Proposal.
                                        - \`Expired\` - Indicates that Agreement validity period elapsed and it was
                                        not approved, rejected nor cancelled.
                                        - \`Terminated\` - Indicates that Agreement is already terminated.
                                        `,
            },
        });
    }
    /**
     * RejectAgreement - Rejects Agreement proposed by the Requestor.
     * The Requestor side is notified about the Provider’s decision to reject a negotiated agreement. This effectively stops the Agreement handshake.
     *
     * **Note**: Mutually exclusive with `approveAgreement`.
     *
     * @param agreementId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    rejectAgreement(agreementId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/agreements/{agreementId}/reject',
            path: {
                'agreementId': agreementId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                410: `Agreement rejection failed permanently.
                                        Attached \`ErrorMessage\` contains further details:
                                        - \`Rejected\` - Indicates that the Provider himself has already
                                        called \`rejectAgreement\`.
                                        - \`Cancelled\` - Indicates that before Provider rejected this Agreement,
                                        the Requestor has called \`cancelAgreement\`, thus invalidating the
                                        Agreement. The Provider may attempt to return to the Negotiation phase
                                        by sending a new Proposal.
                                        - \`Expired\` - Indicates that Agreement validity period elapsed and it was
                                        not approved, rejected nor cancelled.
                                        - \`Terminated\` - Indicates that Agreement is already terminated.
                                        `,
            },
        });
    }
    /**
     * TerminateAgreement - Terminates approved Agreement.
     * Method to finish/close the Agreement while in `Approved` state.
     *
     * The other party gets notified about calling party decision to terminate a "running" agreement.
     *
     * **Note**: Can be invoked at any time after Agreement was approved by both sides.
     *
     * **Note**: Financial and reputational consequences are not defined by this specification.
     *
     * @param agreementId
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    terminateAgreement(agreementId, requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/agreements/{agreementId}/terminate',
            path: {
                'agreementId': agreementId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                409: `Agreement can not be terminated yet (is in \`Proposal\` or \`Pending\` state).`,
                410: `Agreement termination failed permanently.
                                        Attached \`ErrorMessage\` contains further details:
                                        - \`Rejected\` - Indicates that the Provider has rejected this Agreement.
                                        - \`Cancelled\` - Indicates the Requestor has called cancelled this Agreement.
                                        - \`Expired\` - Indicates that Agreement validity period elapsed and it was
                                        not approved, rejected nor cancelled.
                                        - \`Terminated\` - Indicates that Agreement is already terminated.
                                        `,
            },
        });
    }
    /**
     * Gets termination reason reported when terminateAgreement operation was called.
     * Method to get the reason for terminating the Agreement.
     *
     * @param agreementId
     * @returns any Agreement termination reason.
     * @throws ApiError
     */
    getTerminateAgreementReason(agreementId) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/agreements/{agreementId}/terminate/reason',
            path: {
                'agreementId': agreementId,
            },
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
}
exports.ProviderService = ProviderService;
