export type AgreementEvent = ({
    eventType: string;
    eventDate: string;
} & {
    agreement: {
        agreementId: string;
        demand: ({
            /**
             * The object which includes all the Demand/Offer/Proposal properties.
             * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
             *
             * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
             * ### Example property object:
             * ```
             * {
                 * "golem.com.pricing.model":"linear",
                 * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
                 * "golem.com.scheme":"payu",
                 * "golem.com.scheme.payu.interval_sec":6.0,
                 * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
                 * "golem.inf.cpu.architecture":"x86_64",
                 * "golem.inf.cpu.cores":4,
                 * "golem.inf.cpu.threads":7,
                 * "golem.inf.mem.gib":10.612468048930168,
                 * "golem.inf.storage.gib":81.7227783203125,
                 * "golem.node.debug.subnet":"market-devnet",
                 * "golem.node.id.name":"tworec@mf-market-devnet",
                 * "golem.runtime.name":"vm",
                 * "golem.runtime.version@v":"0.1.0"
                 * }
                 * ```
                 *
                 */
            properties: Record<string, any>;
            constraints: string;
        } & {
            readonly demandId: string;
            readonly requestorId: string;
            timestamp: string;
        });
        offer: ({
            /**
             * The object which includes all the Demand/Offer/Proposal properties.
             * This is a JSON object in "flat convention" - where keys are full property names and their values indicate properties.
             *
             * The value's Javascript type shall conform with the type of the property (as indicated in Golem Standards).
             * ### Example property object:
             * ```
             * {
                 * "golem.com.pricing.model":"linear",
                 * "golem.com.pricing.model.linear.coeffs":[0.001, 0.002, 0.0],
                 * "golem.com.scheme":"payu",
                 * "golem.com.scheme.payu.interval_sec":6.0,
                 * "golem.com.usage.vector":["golem.usage.duration_sec","golem.usage.cpu_sec"],
                 * "golem.inf.cpu.architecture":"x86_64",
                 * "golem.inf.cpu.cores":4,
                 * "golem.inf.cpu.threads":7,
                 * "golem.inf.mem.gib":10.612468048930168,
                 * "golem.inf.storage.gib":81.7227783203125,
                 * "golem.node.debug.subnet":"market-devnet",
                 * "golem.node.id.name":"tworec@mf-market-devnet",
                 * "golem.runtime.name":"vm",
                 * "golem.runtime.version@v":"0.1.0"
                 * }
                 * ```
                 *
                 */
            properties: Record<string, any>;
            constraints: string;
        } & {
            readonly offerId: string;
            readonly providerId: string;
            timestamp: string;
        });
        /**
         * End of validity period.
         *
         * Agreement needs to be approved, rejected or cancelled before this date; otherwise will expire.
         *
         */
        validTo: string;
        /**
         * Agreement approval timestamp
         */
        approvedDate?: string;
        /**
         * * `Proposal` - newly created by a Requestor (draft based on Proposal)
         * * `Pending` - confirmed by a Requestor and send to Provider for approval
         * * `Cancelled` by a Requestor
         * * `Rejected` by a Provider
         * * `Approved` by both sides
         * * `Expired` - not approved, rejected nor cancelled within validity period
         * * `Terminated` - finished after approval.
         *
         */
        state: 'Proposal' | 'Pending' | 'Cancelled' | 'Rejected' | 'Approved' | 'Expired' | 'Terminated';
        timestamp: string;
        /**
         * A correlation/session identifier used for querying events related to an action where this appSessionId has been specified.
         *
         */
        appSessionId?: string;
        proposedSignature?: string;
        approvedSignature?: string;
        committedSignature?: string;
    };
});
