"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorService = void 0;
class RequestorService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Binds new GSB services.
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    bindServices(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/services',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
            },
        });
    }
    /**
     * Unbinds GSB services.
     *  Unbinds GSB services and closes existing WS connection. WebSocket endpoint created for these services cannot be accessed after unbinding them. Pending GSB requests will be Cancelled.
     * @param servicesId Generated id for bound GSB services. It is a base64 encoded GSB address prefix.
     * @returns any GSB services are unbound and WS connections disconnected.
     * @throws ApiError
     */
    unbindServices(servicesId) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/services/{servicesId}',
            path: {
                'servicesId': servicesId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
            },
        });
    }
}
exports.RequestorService = RequestorService;
