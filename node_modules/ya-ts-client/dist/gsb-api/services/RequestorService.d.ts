import type { CancelablePromise } from '../core/CancelablePromise';
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
export declare class RequestorService {
    readonly httpRequest: BaseHttpRequest;
    constructor(httpRequest: BaseHttpRequest);
    /**
     * Binds new GSB services.
     * @param requestBody
     * @returns any Unexpected error.
     * @throws ApiError
     */
    bindServices(requestBody: {
        listen: {
            /**
             * GSB services address prefix.
             */
            on?: string;
            /**
             * GSB services address prefix subpath.
             */
            components?: Array<string>;
        };
    }): CancelablePromise<{
        message?: string;
    }>;
    /**
     * Unbinds GSB services.
     *  Unbinds GSB services and closes existing WS connection. WebSocket endpoint created for these services cannot be accessed after unbinding them. Pending GSB requests will be Cancelled.
     * @param servicesId Generated id for bound GSB services. It is a base64 encoded GSB address prefix.
     * @returns any GSB services are unbound and WS connections disconnected.
     * @throws ApiError
     */
    unbindServices(servicesId: string): CancelablePromise<any>;
}
