"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderService = void 0;
class ProviderService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Issue a Debit Note.
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    issueDebitNote(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/debitNotes',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getDebitNotes(afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNotes',
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Debit Note.
     * @param debitNoteId
     * @returns any OK
     * @throws ApiError
     */
    getDebitNote(debitNoteId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNotes/{debitNoteId}',
            path: {
                'debitNoteId': debitNoteId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * @deprecated
     * Get Payments for Debit Note.
     * **WARNING:** Operation not implemented.
     *
     * @param debitNoteId
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getPaymentsForDebitNote(debitNoteId, afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNotes/{debitNoteId}/payments',
            path: {
                'debitNoteId': debitNoteId,
            },
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Send Debit Note to Requestor.
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Debit Note or timeout has passed.
     *
     * @param debitNoteId
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    sendDebitNote(debitNoteId, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/debitNotes/{debitNoteId}/send',
            path: {
                'debitNoteId': debitNoteId,
            },
            query: {
                'timeout': timeout,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Cancel Debit Note.
     * **WARNING:** Operation not implemented.
     *
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Debit Note or timeout has passed. The Requestor may refuse to cancel the Debit Note if they have already accepted it.
     *
     * @param debitNoteId
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    cancelDebitNote(debitNoteId, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/debitNotes/{debitNoteId}/cancel',
            path: {
                'debitNoteId': debitNoteId,
            },
            query: {
                'timeout': timeout,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                409: `The Requestor has refused to cancel the Debit Note.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Get Debit Note events.
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the 'new' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed.
     *
     * **NOTE:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any OK
     * @throws ApiError
     */
    getDebitNoteEvents(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNoteEvents',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Issue an Invoice.
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    issueInvoice(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/invoices',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getInvoices(afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoices',
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Invoice.
     * @param invoiceId
     * @returns any OK
     * @throws ApiError
     */
    getInvoice(invoiceId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoices/{invoiceId}',
            path: {
                'invoiceId': invoiceId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * @deprecated
     * Get Payments for Invoice.
     * **WARNING:** Operation not implemented.
     *
     * @param invoiceId
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getPaymentsForInvoice(invoiceId, afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoices/{invoiceId}/payments',
            path: {
                'invoiceId': invoiceId,
            },
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Send Invoice to Requestor.
     * This is a blocking operation. It will not return until the Requestor has acknowledged receiving the Invoice or timeout has passed.
     *
     * @param invoiceId
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    sendInvoice(invoiceId, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/invoices/{invoiceId}/send',
            path: {
                'invoiceId': invoiceId,
            },
            query: {
                'timeout': timeout,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Cancel Invoice.
     * This is a blocking operation. It will not return until the Requestor has acknowledged cancelling the Invoice or timeout has passed. The Requestor may refuse to cancel the Invoice if they have already accepted it.
     *
     * @param invoiceId
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    cancelInvoice(invoiceId, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/invoices/{invoiceId}/cancel',
            path: {
                'invoiceId': invoiceId,
            },
            query: {
                'timeout': timeout,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                409: `The Requestor has refused to cancel the Invoice.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Get Invoice events.
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the 'new' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed.
     *
     * **NOTE:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any OK
     * @throws ApiError
     */
    getInvoiceEvents(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoiceEvents',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get available accounts for receiving payments.
     * @returns any OK
     * @throws ApiError
     */
    getProviderAccounts() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/providerAccounts',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Payments.
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the 'new' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. `network` and `driver` parameters can be used in order to filter payments.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param network Network identifier used for filtering payments made via the specified network
     * @param driver Driver identifier used for filtering payments made with the selected driver
     * @returns any OK
     * @throws ApiError
     */
    getPayments(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId, network, driver) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/payments',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
                'network': network,
                'driver': driver,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Payment.
     * @param paymentId
     * @returns any OK
     * @throws ApiError
     */
    getPayment(paymentId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/payments/{paymentId}',
            path: {
                'paymentId': paymentId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get status of the payment driver
     * This only relates to the erc20 driver, not erc20legacy. The returned list contains individual status properties, which can be used to identify problems like missing funds or misconfigured max fee per gas on a per-chain (network) basis.
     *
     * @param network Network identifier used for filtering payments made via the specified network
     * @param driver Driver identifier used for filtering payments made with the selected driver
     * @returns any OK
     * @throws ApiError
     */
    paymentsStatus(network, driver) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/payments/status',
            query: {
                'network': network,
                'driver': driver,
            },
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
}
exports.ProviderService = ProviderService;
