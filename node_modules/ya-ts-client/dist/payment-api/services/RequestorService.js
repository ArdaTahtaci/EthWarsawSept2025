"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestorService = void 0;
class RequestorService {
    constructor(httpRequest) {
        this.httpRequest = httpRequest;
    }
    /**
     * Get Debit Notes known by this node (either issued by this Provider or received by this Requestor).
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getDebitNotes(afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNotes',
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Debit Note.
     * @param debitNoteId
     * @returns any OK
     * @throws ApiError
     */
    getDebitNote(debitNoteId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNotes/{debitNoteId}',
            path: {
                'debitNoteId': debitNoteId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * @deprecated
     * Get Payments for Debit Note.
     * **WARNING:** Operation not implemented.
     *
     * @param debitNoteId
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getPaymentsForDebitNote(debitNoteId, afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNotes/{debitNoteId}/payments',
            path: {
                'debitNoteId': debitNoteId,
            },
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Debit Note events.
     * Listen for Debit Note-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the 'new' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed.
     *
     * **NOTE:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any OK
     * @throws ApiError
     */
    getDebitNoteEvents(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/debitNoteEvents',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Issue an Invoice.
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    issueInvoice(requestBody) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/invoices',
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Invoices known to this node (either issued by this Provider or received by this Requestor).
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getInvoices(afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoices',
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Invoice.
     * @param invoiceId
     * @returns any OK
     * @throws ApiError
     */
    getInvoice(invoiceId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoices/{invoiceId}',
            path: {
                'invoiceId': invoiceId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * @deprecated
     * Get Payments for Invoice.
     * **WARNING:** Operation not implemented.
     *
     * @param invoiceId
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    getPaymentsForInvoice(invoiceId, afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoices/{invoiceId}/payments',
            path: {
                'invoiceId': invoiceId,
            },
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Invoice events.
     * Listen for Invoice-related events using long-polling. If there are any events the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the 'new' events. Setting the parameter value to the timestamp of the last processed event ensures that no events will go unnoticed.
     *
     * **NOTE:** The events are persistent, ie. calling the API does not remove the event records from receiving queue.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @returns any OK
     * @throws ApiError
     */
    getInvoiceEvents(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/invoiceEvents',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Accept received Debit Note.
     * Send Debit Note Accepted message to Debit Note Issuer. If Debit Note is binding (i.e. has non-null payment due date) trigger payment orchestration for this Debit Note using specified Allocation.
     *
     * This is a blocking operation. It will not return until the Requestor has acknowledged accepting the Invoice or timeout has passed.
     *
     * **NOTE:** An Accepted Debit Note cannot be Rejected later.
     *
     * @param debitNoteId
     * @param requestBody
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    acceptDebitNote(debitNoteId, requestBody, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/debitNotes/{debitNoteId}/accept',
            path: {
                'debitNoteId': debitNoteId,
            },
            query: {
                'timeout': timeout,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Reject received Debit Note.
     * **WARNING:** Operation not implemented.
     *
     * Send Debit Note Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept the Debit Note (for some reason).
     *
     * This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.
     *
     * **NOTE:** A Rejected Debit Note can be Accepted subsequently (e.g. as a result of some arbitrage).
     *
     * @param debitNoteId
     * @param requestBody
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    rejectDebitNote(debitNoteId, requestBody, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/debitNotes/{debitNoteId}/reject',
            path: {
                'debitNoteId': debitNoteId,
            },
            query: {
                'timeout': timeout,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Accept received Invoice.
     * Send Invoice Accepted message to Invoice Issuer. Trigger payment orchestration for this Invoice using specified Allocation.
     *
     * This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.
     *
     * **NOTE:** An Accepted Invoice cannot be Rejected later.
     *
     * @param invoiceId
     * @param requestBody
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    acceptInvoice(invoiceId, requestBody, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/invoices/{invoiceId}/accept',
            path: {
                'invoiceId': invoiceId,
            },
            query: {
                'timeout': timeout,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Reject received Invoice.
     * **WARNING:** Operation not implemented.
     *
     * Send Invoice Rejected message to Invoice Issuer. Notification of rejection is signalling that Requestor does not accept Invoice (for some reason).
     *
     * This is a blocking operation. It will not return until the Requestor has acknowledged rejecting the Invoice or timeout has passed.
     *
     * **NOTE:** A Rejected Invoice can be Accepted subsequently (e.g. as a result of some arbitrage).
     *
     * @param invoiceId
     * @param requestBody
     * @param timeout Timeout used in blocking calls waiting for eg. acknowledgement. How many seconds server should wait for response/acknowledgement of an action (0.0 means it should wait for other party's response indefinitely)
     *
     * @returns any OK
     * @throws ApiError
     */
    rejectInvoice(invoiceId, requestBody, timeout = 5) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/invoices/{invoiceId}/reject',
            path: {
                'invoiceId': invoiceId,
            },
            query: {
                'timeout': timeout,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
                504: `(504) Ack timeout.`,
            },
        });
    }
    /**
     * Create Allocation.
     * Allocate funds to make sure they are not spent elsewhere.
     * @param requestBody
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxItems Maximum number of items that server should return at once.
     *
     * @returns any OK
     * @throws ApiError
     */
    createAllocation(requestBody, afterTimestamp, maxItems = 10) {
        return this.httpRequest.request({
            method: 'POST',
            url: '/allocations',
            query: {
                'afterTimestamp': afterTimestamp,
                'maxItems': maxItems,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Allocations.
     * @returns any OK
     * @throws ApiError
     */
    getAllocations() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/allocations',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Allocation.
     * @param allocationId
     * @returns any OK
     * @throws ApiError
     */
    getAllocation(allocationId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/allocations/{allocationId}',
            path: {
                'allocationId': allocationId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Amend Allocation.
     * @param allocationId
     * @param requestBody
     * @returns any OK
     * @throws ApiError
     */
    amendAllocation(allocationId, requestBody) {
        return this.httpRequest.request({
            method: 'PUT',
            url: '/allocations/{allocationId}',
            path: {
                'allocationId': allocationId,
            },
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Release Allocation.
     * The Allocation of amount is released. Note that this operation releases currently allocated amount (which may have been reduced by subsequent Invoice Payments).
     *
     * **WARNING:** Deposits not implemented.
     *
     * If the Allocation was connected with a Deposit the release amount from Deposit shall be marked as pending to be paid back to Requestor - and eventually will be paid back, unless a subsequent Allocation with Deposit is made. The Payment Platform implementations may optimize unnecessary fund transfers (i.e. will not pay back the Deposit if released funds can be assigned to a new Allocation with Deposit).
     *
     * @param allocationId
     * @returns any OK
     * @throws ApiError
     */
    releaseAllocation(allocationId) {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/allocations/{allocationId}',
            path: {
                'allocationId': allocationId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                410: `(410) Gone.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Payments.
     * Payments can be treated as events and this method can be used to listen for new payments by long-polling.  If there are any payments the method will return them immediately. If there are none the method will wait until one appears or timeout passes. `afterTimestamp` parameter can be used in order to get just the 'new' payments. Setting the parameter value to the timestamp of the last processed payment ensures that no payments will go unnoticed. `network` and `driver` parameters can be used in order to filter payments.
     *
     * @param timeout Timeout used in long-polling calls (in seconds). How many seconds server should wait for response containing new events (`0.0` means it should return immediately if there are no events)
     *
     * @param afterTimestamp Apply only to records created later than the specified timestamp
     * @param maxEvents Maximum number of events that server should return at once.
     *
     * @param appSessionId A correlation/session identifier used for querying events related to an action where this appSessionId has been specified
     * @param network Network identifier used for filtering payments made via the specified network
     * @param driver Driver identifier used for filtering payments made with the selected driver
     * @returns any OK
     * @throws ApiError
     */
    getPayments(timeout = 5, afterTimestamp, maxEvents = 10, appSessionId, network, driver) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/payments',
            query: {
                'timeout': timeout,
                'afterTimestamp': afterTimestamp,
                'maxEvents': maxEvents,
                'appSessionId': appSessionId,
                'network': network,
                'driver': driver,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get Payment.
     * @param paymentId
     * @returns any OK
     * @throws ApiError
     */
    getPayment(paymentId) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/payments/{paymentId}',
            path: {
                'paymentId': paymentId,
            },
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get status of the payment driver
     * This only relates to the erc20 driver, not erc20legacy. The returned list contains individual status properties, which can be used to identify problems like missing funds or misconfigured max fee per gas on a per-chain (network) basis.
     *
     * @param network Network identifier used for filtering payments made via the specified network
     * @param driver Driver identifier used for filtering payments made with the selected driver
     * @returns any OK
     * @throws ApiError
     */
    paymentsStatus(network, driver) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/payments/status',
            query: {
                'network': network,
                'driver': driver,
            },
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                404: `(404) The specified resource was not found.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Get available accounts for sending payments.
     * @returns any OK
     * @throws ApiError
     */
    getRequestorAccounts() {
        return this.httpRequest.request({
            method: 'GET',
            url: '/requestorAccounts',
            errors: {
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
    /**
     * Obtain Demand elements specific to the given allocations, to be appended to a market Demand.
     * Generate payment-related properties and constraints to be added to a demand published on the marketplace. As a parameter it accepts a list of IDs of allocations to be used to pay for invoices resulting from the decorated demand.
     *
     * @param allocationIds
     * @returns any OK
     * @throws ApiError
     */
    getDemandDecorations(allocationIds) {
        return this.httpRequest.request({
            method: 'GET',
            url: '/demandDecorations',
            query: {
                'allocationIds': allocationIds,
            },
            errors: {
                400: `(400) Bad request`,
                401: `(401) Authorization information is missing or invalid.`,
                500: `(500) Server error.`,
            },
        });
    }
}
exports.RequestorService = RequestorService;
